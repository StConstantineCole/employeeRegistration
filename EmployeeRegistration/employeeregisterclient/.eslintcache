[{"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\components\\Employee.js":"4","C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\components\\EmployeeList.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":197,"mtime":1610155341955,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":4811,"mtime":1611245420780,"results":"10","hashOfConfig":"7"},{"size":4713,"mtime":1610833281334,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"he7fan",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\index.js",[],["24","25"],"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\App.js",[],"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\components\\Employee.js",[],"C:\\Users\\Administrator\\Desktop\\Portfolio\\C#_ASP_PROJECTS\\employeeregisterclient\\src\\components\\EmployeeList.js",["26"],"import React, { useState, useEffect} from 'react';\r\nimport Employee from './Employee';\r\nimport axios from 'axios';\r\n\r\nexport default function EmployeeList() {\r\n\r\n    const [employeeList, setEmployeeList] = useState([])\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n    \r\n\r\n    // By using this Hook, you tell React that your component needs to do something after render\r\n    useEffect(() => { \r\n        refreshEmployeeList();\r\n    }, [])\r\n\r\n    \r\n    //axios CRUD methods \r\n    const employeeAPI = (url = 'https://localhost:44350/api/Employee/') => {\r\n            return {\r\n                fetchAll: () => axios.get(url),\r\n                create: newRecord => axios.post(url, newRecord),\r\n                update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n                delete: id => axios.delete(url + id)\r\n        }\r\n    }  \r\n                // funcion to call/get all emplyees from the Employee API\r\n                function refreshEmployeeList(){ \r\n                    employeeAPI().fetchAll()\r\n                        .then(res => setEmployeeList(res.data))\r\n                        .catch(err => console.log(err))\r\n                }\r\n    \r\n                // funcion to CREATE all emplyees \r\n    const addOrEdit = (formData, onSuccess) => {\r\n        if (formData.get('employeeID')===\"0\")   \r\n                employeeAPI().create(formData)\r\n                    .then(res => {\r\n                        onSuccess(); //Checks if the task as been done successfully\r\n                        refreshEmployeeList();\r\n                    })\r\n                \r\n                    .catch(err => console.log(err))\r\n        else\r\n            //updates created employee \r\n              employeeAPI().update(formData.get('employeeID'), formData)\r\n                    .then(res => {\r\n                        onSuccess(); \r\n                        refreshEmployeeList();\r\n                    })\r\n                    .catch(err => console.log(err))\r\n                }  \r\n                \r\n    \r\n    \r\n            const showRecordDetails = data => { \r\n                setRecordForEdit(data)\r\n                    }\r\n\r\n    \r\n    const onDelete = (e, id) => { \r\n        e.stopPropagation();\r\n        if (window.confirm(\"Are you sure you want delete this record?\")) { \r\n            employeeAPI().delete(id)\r\n                .then(res => refreshEmployeeList())\r\n            .catch(err=>console.log(err))\r\n            \r\n        }\r\n    }\r\n        const imageCard = data => (\r\n            <div className=\"card\" onClick={() => { showRecordDetails(data) }}>\r\n                <img src={ data.imageSrc} alt=\"Emloyee\" className=\"card-img-top rounded-circle\"/>\r\n                <div className=\"card-body\">\r\n                    <h5>{data.firstName}</h5>\r\n                    <h5>{data.lastName}</h5>\r\n                    <button className=\"btn btn-light delete-button\" onClick={e => onDelete(e, parseInt(data.employeeID))}>\r\n                    <i className=\"far fa-trash-alt\"></i>\r\n                    </button>\r\n                    \r\n\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n        \r\n        return (\r\n\r\n                    <div className =\"row\">\r\n                    <div className=\"col-md-12\"> \r\n                    <div className=\"jumbotron jumbotron-fluid py-4\">\r\n            <div className=\"container text-center\">\r\n                <h1 className=\"display-4\">Employee Register</h1>\r\n            </div>\r\n            </div>   \r\n            </div>\r\n                <div className = \"col-md-4\">\r\n                    <Employee\r\n                        addOrEdit={addOrEdit}\r\n                        recordForEdit={recordForEdit}\r\n                    />\r\n                </div>\r\n                <div className = \"col-md-8\">\r\n                    <div className=\"text-center\">\r\n                        <table>\r\n                            <tbody>\r\n                                {\r\n                                    //tr > td\r\n                                    [...Array(Math.ceil(employeeList.length / 3))].map((e, i) =>\r\n                                        <tr key={i}>\r\n                                            <td>{imageCard(employeeList[3 * i]) }</td>\r\n                                            <td>{employeeList[3 * i + 1] ? imageCard(employeeList[3 * i + 1]) : null}</td>\r\n                                            <td>{employeeList[3 * i + 2] ? imageCard(employeeList[3 * i + 2]) : null }</td>\r\n                                    </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                    </table>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n ",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":14,"column":8,"nodeType":"33","endLine":14,"endColumn":10,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshEmployeeList'. Either include it or remove the dependency array.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [refreshEmployeeList]",{"range":"40","text":"41"},[451,453],"[refreshEmployeeList]"]